// This file has been automatically generated by the Unreal Header Implementation tool

#include "Buildables/FGBuildableDockingStation.h"

AFGBuildableDockingStation::AFGBuildableDockingStation(){ }
void AFGBuildableDockingStation::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const{ }
void AFGBuildableDockingStation::PreReplication(IRepChangedPropertyTracker& ChangedPropertyTracker){ }
void AFGBuildableDockingStation::BeginPlay(){ }
void AFGBuildableDockingStation::Tick(float DeltaSeconds){ }
void AFGBuildableDockingStation::EndPlay(const EEndPlayReason::Type EndPlayReason){ }
void AFGBuildableDockingStation::Destroyed(){ }
void AFGBuildableDockingStation::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGBuildableDockingStation::OnReplicationDetailActorRemoved(){ }
float AFGBuildableDockingStation::GetSignificanceRange(){ return float(); }
bool AFGBuildableDockingStation::DockActor( AActor* actor){ return bool(); }
void AFGBuildableDockingStation::Undock(bool notifyDockedActor){ }
void AFGBuildableDockingStation::SetIsInLoadMode(bool isInLoadMode){ }
bool AFGBuildableDockingStation::GetIsInLoadMode() const{ return bool(); }
bool AFGBuildableDockingStation::IsLoadUnloading() const{ return bool(); }
void AFGBuildableDockingStation::SetVehicleFuelConsumptionRate(float vehicleFuelConsumptionRate){ }
void AFGBuildableDockingStation::SetItemTransferRate(float itemTransferRate){ }
void AFGBuildableDockingStation::SetMaximumStackTransferRate(float maximumItemTransferRate){ }
FVector AFGBuildableDockingStation::GetWorldDockPosition() const{ return FVector(); }
void AFGBuildableDockingStation::FindStationTargets(TArray<  AFGTargetPoint* >& targets){ }
void AFGBuildableDockingStation::UpdateVehicleTargets(bool lifecycleStart){ }
void AFGBuildableDockingStation::CleanUpStationVehicleTargets(){ }
void AFGBuildableDockingStation::AddDockingVehicle( AFGWheeledVehicle* vehicle){ }
void AFGBuildableDockingStation::RemoveDockingVehicle( AFGWheeledVehicle* vehicle){ }
void AFGBuildableDockingStation::UpdateVehicleFuelConsumptionRate(){ }
void AFGBuildableDockingStation::UpdateMaximumStackTransferRate(bool dispatchToMainThread){ }
void AFGBuildableDockingStation::UpdateItemTransferRate(bool dispatchToMainThread){ }
bool AFGBuildableDockingStation::CanBeRefuelingVehicle(AFGWheeledVehicle* vehicle) const{ return bool(); }
void AFGBuildableDockingStation::SetRefuelingVehicle(AFGWheeledVehicle* vehicle){ }
bool AFGBuildableDockingStation::HasSufficientFuelType() const{ return bool(); }
void AFGBuildableDockingStation::PreSerializedToBlueprint(){ }
void AFGBuildableDockingStation::PostSerializedToBlueprint(){ }
void AFGBuildableDockingStation::PostSerializedFromBlueprint(bool isBlueprintWorld){ }
void AFGBuildableDockingStation::Factory_Tick(float dt){ }
void AFGBuildableDockingStation::Factory_TickProducing(float dt){ }
void AFGBuildableDockingStation::Factory_CollectInput_Implementation(){ }
bool AFGBuildableDockingStation::CanProduce_Implementation() const{ return bool(); }
void AFGBuildableDockingStation::OnRep_ReplicationDetailActor(){ }
AFGReplicationDetailActor_DockingStation* AFGBuildableDockingStation::GetCastRepDetailsActor() const{ return nullptr; }
void AFGBuildableDockingStation::OnRep_FuelInventory(){ }
bool AFGBuildableDockingStation::IsValidFuel(TSubclassOf<  UFGItemDescriptor > resource) const{ return bool(); }
bool AFGBuildableDockingStation::FilterFuelClasses(TSubclassOf< UObject > object, int32 idx) const{ return bool(); }
void AFGBuildableDockingStation::EnsureInfoCreated(){ }
bool AFGBuildableDockingStation::Factory_LoadFuel(AFGWheeledVehicle* vehicle, float percentOfStack, bool conserveFuel){ return bool(); }
void AFGBuildableDockingStation::Factory_LoadDockedInventory(UFGInventoryComponent* dockedInventory){ }
void AFGBuildableDockingStation::Factory_UnloadDockedInventory(UFGInventoryComponent* dockedInventory){ }
void AFGBuildableDockingStation::LoadUnloadVehicleComplete(){ }
void AFGBuildableDockingStation::OnDockingAreaBeginOverlap(UPrimitiveComponent* thisComponent, AActor* otherActor, UPrimitiveComponent* otherComponent, int32 otherBodyIndex, bool isFromSweep, const FHitResult& sweepResult){ }
void AFGBuildableDockingStation::OnDockingAreaEndOverlap(UPrimitiveComponent* thisComponent, AActor* otherActor, UPrimitiveComponent* otherComponent, int32 otherBodyIndex){ }
void AFGBuildableDockingStation::OnRep_VehicleFuelConsumptionRate(){ }
void AFGBuildableDockingStation::OnRep_ItemTransferRate(){ }
void AFGBuildableDockingStation::OnRep_MaximumStackTransferRate(){ }
FName AFGBuildableDockingStation::sFuelTag = FName();
