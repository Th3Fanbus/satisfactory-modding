// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGWheeledVehicleInfo.h"

#ifdef DEBUG_SELF_DRIVING
void AFGWheeledVehicleInfo::DrawDebug(int debugLevel){ }
#endif 
AFGWheeledVehicleInfo::AFGWheeledVehicleInfo(){ }
void AFGWheeledVehicleInfo::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const{ }
void AFGWheeledVehicleInfo::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
bool AFGWheeledVehicleInfo::AddAsRepresentation(){ return bool(); }
bool AFGWheeledVehicleInfo::UpdateRepresentation(){ return bool(); }
bool AFGWheeledVehicleInfo::RemoveAsRepresentation(){ return bool(); }
bool AFGWheeledVehicleInfo::IsActorStatic(){ return bool(); }
FVector AFGWheeledVehicleInfo::GetRealActorLocation(){ return FVector(); }
FRotator AFGWheeledVehicleInfo::GetRealActorRotation(){ return FRotator(); }
UTexture2D* AFGWheeledVehicleInfo::GetActorRepresentationTexture(){ return nullptr; }
FText AFGWheeledVehicleInfo::GetActorRepresentationText(){ return FText(); }
void AFGWheeledVehicleInfo::SetActorRepresentationText(const FText& newText){ }
FLinearColor AFGWheeledVehicleInfo::GetActorRepresentationColor(){ return FLinearColor(); }
void AFGWheeledVehicleInfo::SetActorRepresentationColor(FLinearColor newColor){ }
ERepresentationType AFGWheeledVehicleInfo::GetActorRepresentationType(){ return ERepresentationType(); }
bool AFGWheeledVehicleInfo::GetActorShouldShowInCompass(){ return bool(); }
bool AFGWheeledVehicleInfo::GetActorShouldShowOnMap(){ return bool(); }
EFogOfWarRevealType AFGWheeledVehicleInfo::GetActorFogOfWarRevealType(){ return EFogOfWarRevealType(); }
float AFGWheeledVehicleInfo::GetActorFogOfWarRevealRadius(){ return float(); }
ECompassViewDistance AFGWheeledVehicleInfo::GetActorCompassViewDistance(){ return ECompassViewDistance(); }
void AFGWheeledVehicleInfo::SetActorCompassViewDistance(ECompassViewDistance compassViewDistance){ }
void AFGWheeledVehicleInfo::BeginPlay(){ }
void AFGWheeledVehicleInfo::EndPlay(const EEndPlayReason::Type EndPlayReason){ }
void AFGWheeledVehicleInfo::Tick(float dt){ }
void AFGWheeledVehicleInfo::Init(AFGWheeledVehicle* vehicle){ }
void AFGWheeledVehicleInfo::InitCollisionData( UFGVehicleCollisionBoxComponent* collisionBox){ }
AFGWheeledVehicle* AFGWheeledVehicleInfo::GetVehicle() const{ return nullptr; }
void AFGWheeledVehicleInfo::SetVehicleStatus(EVehicleStatus status){ }
void AFGWheeledVehicleInfo::SetIsFollowingPath(bool isFollowingPath){ }
void AFGWheeledVehicleInfo::SetIsPossessed(bool isPossessed){ }
void AFGWheeledVehicleInfo::SetTarget( AFGTargetPoint* target){ }
void AFGWheeledVehicleInfo::SetIsSimulated(bool isSimulated){ }
FVector AFGWheeledVehicleInfo::GetVehicleLocation() const{ return FVector(); }
FRotator AFGWheeledVehicleInfo::GetVehicleRotation() const{ return FRotator(); }
void AFGWheeledVehicleInfo::UpdateTarget(){ }
bool AFGWheeledVehicleInfo::ShouldStayAtDock(){ return bool(); }
void AFGWheeledVehicleInfo::OnTargetDestroyed( AFGTargetPoint* target){ }
AFGDrivingTargetList* AFGWheeledVehicleInfo::GetTargetList() const{ return nullptr; }
void AFGWheeledVehicleInfo::TryActivatePathSimulation(){ }
void AFGWheeledVehicleInfo::SetSimulationVisible(bool isVisible){ }
void AFGWheeledVehicleInfo::UpdateCustomizationData( AFGWheeledVehicle* vehicle){ }
void AFGWheeledVehicleInfo::ApplyMeshPrimitiveData(const FFactoryCustomizationData& customizationData){ }
void AFGWheeledVehicleInfo::ShowGhostingEffect(bool enabled){ }
void AFGWheeledVehicleInfo::OnRep_ReplicatedMesh(){ }
void AFGWheeledVehicleInfo::OnRep_StaticMeshComponent(){ }
void AFGWheeledVehicleInfo::OnRep_ReplicatedVehicle(){ }
void AFGWheeledVehicleInfo::OnRep_Status(){ }
void AFGWheeledVehicleInfo::OnRep_IsFollowingPath(){ }
void AFGWheeledVehicleInfo::OnRep_IsGhosting(){ }
void AFGWheeledVehicleInfo::OnSimulationTargetReached(AFGTargetPoint* newTarget){ }
void AFGWheeledVehicleInfo::UpdateComponentVisibility(){ }
