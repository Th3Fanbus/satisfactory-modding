// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGGameState.h"

AFGGameState::AFGGameState(){ }
void AFGGameState::Serialize(FArchive& ar){ Super::Serialize(ar); }
void AFGGameState::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const{ }
void AFGGameState::Tick(float delta){ }
void AFGGameState::EndPlay(const EEndPlayReason::Type EndPlayReason){ }
void AFGGameState::PreSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGGameState::PostSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGGameState::PreLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGGameState::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGGameState::GatherDependencies_Implementation(TArray< UObject* >& out_dependentObjects){ }
bool AFGGameState::NeedTransform_Implementation(){ return bool(); }
bool AFGGameState::ShouldSave_Implementation() const{ return bool(); }
void AFGGameState::HandleMatchIsWaitingToStart(){ }
void AFGGameState::HandleMatchHasStarted(){ }
void AFGGameState::AddPlayerState( APlayerState* playerState){ }
void AFGGameState::Init(){ }
bool AFGGameState::AreClientSubsystemsValid(){ return bool(); }
int32 AFGGameState::FindFreeSlot( AFGPlayerState* playerState){ return int32(); }
bool AFGGameState::IsTradingPostBuilt() const{ return bool(); }
bool AFGGameState::HasInitalTradingPostLandAnimPlayed() const{ return bool(); }
void AFGGameState::SetHasInitalTradingPostLandAnimPlayed(){ }
bool AFGGameState::IsSpaceElevatorBuilt() const{ return bool(); }
void AFGGameState::GetVisitedMapAreas(TArray< TSubclassOf< UFGMapArea > >& out_VisitedAreas){ }
bool AFGGameState::IsMapAreaVisisted(TSubclassOf< UFGMapArea > inArea){ return bool(); }
void AFGGameState::AddUniqueVisistedMapArea(TSubclassOf< UFGMapArea > mapArea){ }
void AFGGameState::OnRep_MapAreaVisited(){ }
void AFGGameState::NotifyPlayerAdded( AFGCharacterPlayer* inPlayer){ }
void AFGGameState::SendMessageToAllPlayers(TSubclassOf<  UFGMessageBase > inMessage){ }
void AFGGameState::SendMessageToPlayer(TSubclassOf<  UFGMessageBase > inMessage,  APlayerController* controller){ }
int32 AFGGameState::GetTotalPlayDuration() const{ return int32(); }
void AFGGameState::SetSessionName(const FString& inName){ }
void AFGGameState::SetupColorSlots_Data(const TArray< FFactoryCustomizationColorSlot >& colorSlotsPrimary_Data){ }
void AFGGameState::Server_SetBuildingColorDataForSlot_Implementation(uint8 slotIdx, FFactoryCustomizationColorSlot colorData){ }
void AFGGameState::RemovePlayerColorPresetAtIndex(int32 index){ }
void AFGGameState::AddPlayerColorPreset(FText presetName, FLinearColor color){ }
FLinearColor AFGGameState::GetBuildingColorPrimary_Linear(uint8 slot){ return FLinearColor(); }
FLinearColor AFGGameState::GetBuildingColorSecondary_Linear(uint8 slot){ return FLinearColor(); }
void AFGGameState::Server_SetBuildableLightColorSlot_Implementation(uint8 slotIdx, FLinearColor color){ }
FFactoryCustomizationColorSlot AFGGameState::GetBuildingColorDataForSlot(uint8 slot){ return FFactoryCustomizationColorSlot(); }
TSubclassOf< class UFGFactoryCustomizationDescriptor_Swatch > AFGGameState::GetCurrentSwatchForSwatchGroup(TSubclassOf< UFGSwatchGroup > swatchGroup){ return TSubclassOf<class UFGFactoryCustomizationDescriptor_Swatch>(); }
void AFGGameState::OnRep_BuildingColorSlot_Data(){ }
void AFGGameState::OnRep_BuildableLightColorSlots(){ }
void AFGGameState::ClaimPlayerColor( AFGPlayerState* playerState){ }
void AFGGameState::ReleasePlayerColor( AFGPlayerState* playerState){ }
void AFGGameState::ItemPickedUp(TSubclassOf<  UFGItemDescriptor > itemClass){ }
void AFGGameState::SetPlannedServerRestartWorldTime(float worldTimeSeconds){ }
FDateTime AFGGameState::GetServerLocalDateTime() const{ return FDateTime(); }
void AFGGameState::OnRep_OnlineSessionVisibility(){ }
bool AFGGameState::IsCustomizerRecipeUnlocked(){ return bool(); }
void AFGGameState::SetDefaultSwatchForBuildableGroup(TSubclassOf<  UFGSwatchGroup > swatchGroup, TSubclassOf<  UFGFactoryCustomizationDescriptor_Swatch> swatch){ }
void AFGGameState::AddTetrominoResult(const FMiniGameResult& newResult){ }
void AFGGameState::OnRep_TetrominoLeaderBoard(){ }
void AFGGameState::CheckRestartTime(){ }
void AFGGameState::OnRep_PlannedRestartTime(){ }
