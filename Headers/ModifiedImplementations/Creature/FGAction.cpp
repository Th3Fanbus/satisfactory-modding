// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGAction.h"

UFGAction::UFGAction(const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer) { }
void UFGAction::PostInitProperties(){ Super::PostInitProperties(); }
bool UFGAction::CallRemoteFunction (UFunction * Function, void * Parms,  FOutParmRec * OutParms, FFrame * Stack){ return bool(); }
int32 UFGAction::GetFunctionCallspace (UFunction* Function, FFrame* Stack){ return int32(); }
void UFGAction::BeginDestroy(){ Super::BeginDestroy(); }
bool UFGAction::InitializeAction(AController* controller, APawn* pawn){ return bool(); }
bool UFGAction::SetupAction_Implementation(){ return bool(); }
bool UFGAction::ScoreAction_Implementation(float& score) const{ return bool(); }
bool UFGAction::CanPerformAction_Implementation() const{ return bool(); }
bool UFGAction::ExecuteAction(){ return bool(); }
void UFGAction::PerformAction_Implementation(){ }
void UFGAction::CancelAction_Implementation(){ }
void UFGAction::ActionTick_Implementation(float DeltaTime){ }
void UFGAction::FinishAction(bool ActionSuccess){ }
bool UFGAction::IsInCooldown() const{ return bool(); }
bool UFGAction::HasAuthority() const{ return bool(); }
void UFGAction::Tick(float DeltaTime){ }
bool UFGAction::IsTickable() const{ return bool(); }
bool UFGAction::IsTickableWhenPaused() const{ return bool(); }
bool UFGAction::IsTickableInEditor() const{ return bool(); }
TStatId UFGAction::GetStatId() const{ return TStatId(); }
ETickableTickType UFGAction::GetTickableTickType() const{ return ETickableTickType(); }
UWorld* UFGAction::GetWorld() const{ return nullptr; }
UWorld* UFGAction::GetTickableGameObjectWorld() const{ return nullptr; }
bool UFGAction::ExecutePreAction(){ return bool(); }
bool UFGAction::ExecuteMainAction(){ return bool(); }
bool UFGAction::ExecutePostAction(){ return bool(); }
void UFGAction::SetActionState(EFGActionState newState){ }
void UFGAction::CleanupAction_Implementation(bool actionSuccess){ }
void UFGAction::OnPreActionFinished(bool success){ }
void UFGAction::InternalActionCleanup(bool actionSuccess){ }
void UFGAction::ClearTimers(){ }
void UFGAction::Multicast_RepActionState_Implementation(EFGActionState newState){ }
void UFGAction::OnOuterControllerChanged(APawn* pawn, AController* controller){ }
