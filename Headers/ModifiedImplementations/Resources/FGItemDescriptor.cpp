// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGItemDescriptor.h"

#if WITH_EDITOR
void UFGItemDescriptor::PostEditChangeProperty( FPropertyChangedEvent& propertyChangedEvent){ Super::PostEditChangeProperty(propertyChangedEvent); }
#endif 
#if !UE_BUILD_SHIPPING
#endif 
UFGItemDescriptor::UFGItemDescriptor(){ }
void UFGItemDescriptor::Serialize(FArchive& ar){ Super::Serialize(ar); }
void UFGItemDescriptor::PostLoad(){ Super::PostLoad(); }
EResourceForm UFGItemDescriptor::GetForm(TSubclassOf< UFGItemDescriptor > inClass){ return EResourceForm(); }
float UFGItemDescriptor::GetEnergyValue(TSubclassOf< UFGItemDescriptor > inClass){ return float(); }
float UFGItemDescriptor::GetRadioactiveDecay(TSubclassOf< UFGItemDescriptor > inClass){ return float(); }
FText UFGItemDescriptor::GetItemName(TSubclassOf< UFGItemDescriptor > inClass){ return FText(); }
FText UFGItemDescriptor::GetItemDescription(TSubclassOf< UFGItemDescriptor > inClass){ return FText(); }
FText UFGItemDescriptor::GetAbbreviatedDisplayName(TSubclassOf< UFGItemDescriptor > inClass){ return FText(); }
UTexture2D* UFGItemDescriptor::GetSmallIcon(TSubclassOf< UFGItemDescriptor > inClass){ return nullptr; }
UTexture2D* UFGItemDescriptor::GetBigIcon(TSubclassOf< UFGItemDescriptor > inClass){ return nullptr; }
UMaterialInterface* UFGItemDescriptor::GetCrosshairMaterial(TSubclassOf< UFGItemDescriptor > inClass){ return nullptr; }
void UFGItemDescriptor::GetDescriptorStatBars(TSubclassOf< UFGItemDescriptor > inClass, TArray<FDescriptorStatBar>& out_DescriptorStatBars){ }
void UFGItemDescriptor::GetInventorySettingsWidget(TSubclassOf< UFGItemDescriptor > inClass, TSubclassOf<class UFGInventorySettingsWidget>& out_InventorySettingsWidget){ }
UStaticMesh* UFGItemDescriptor::GetItemMesh(TSubclassOf< UFGItemDescriptor > inClass){ return nullptr; }
int32 UFGItemDescriptor::GetStackSize(TSubclassOf< UFGItemDescriptor > inClass){ return int32(); }
float UFGItemDescriptor::GetStackSizeConverted(TSubclassOf< UFGItemDescriptor > inClass){ return float(); }
bool UFGItemDescriptor::CanBeDiscarded(TSubclassOf< UFGItemDescriptor > inClass){ return bool(); }
bool UFGItemDescriptor::RememberPickUp(TSubclassOf< UFGItemDescriptor > inClass){ return bool(); }
TSubclassOf< class UFGCategory > UFGItemDescriptor::GetCategory(TSubclassOf< UFGItemDescriptor > inClass){ return TSubclassOf<class UFGCategory>(); }
void UFGItemDescriptor::GetSubCategories(TSubclassOf< UFGItemDescriptor > inClass, TArray< TSubclassOf<  UFGCategory > >& out_subCategories){ }
TArray< TSubclassOf< class UFGCategory > > UFGItemDescriptor::GetSubCategoriesOfClass(TSubclassOf< UFGItemDescriptor > inClass, TSubclassOf<  UFGCategory > outputCategoryClass){ return TArray<TSubclassOf<class UFGCategory> >(); }
TSubclassOf< class UFGQuickSwitchGroup > UFGItemDescriptor::GetQuickSwitchGroup(TSubclassOf< UFGItemDescriptor > inClass){ return TSubclassOf<class UFGQuickSwitchGroup>(); }
float UFGItemDescriptor::GetMenuPriority(TSubclassOf< UFGItemDescriptor > inClass){ return float(); }
FColor UFGItemDescriptor::GetFluidColor(TSubclassOf< UFGItemDescriptor > inClass){ return FColor(); }
FLinearColor UFGItemDescriptor::GetFluidColorLinear(TSubclassOf< UFGItemDescriptor > inClass){ return FLinearColor(); }
FColor UFGItemDescriptor::GetGasColor(TSubclassOf< UFGItemDescriptor > inClass){ return FColor(); }
FLinearColor UFGItemDescriptor::GetGasColorLinear(TSubclassOf< UFGItemDescriptor > inClass){ return FLinearColor(); }
TArray< FCompatibleItemDescriptors > UFGItemDescriptor::GetCompatibleItemDescriptors(TSubclassOf< UFGItemDescriptor > inClass){ return TArray<FCompatibleItemDescriptors>(); }
TSubclassOf< AActor > UFGItemDescriptor::GetClassToScanFor(TSubclassOf< UFGItemDescriptor > inClass){ return TSubclassOf<AActor>(); }
TSubclassOf< class UFGScannableDetails > UFGItemDescriptor::GetCustomScannableDetails(TSubclassOf< UFGItemDescriptor > inClass){ return TSubclassOf<class UFGScannableDetails>(); }
EScannableActorType UFGItemDescriptor::GetScannableActorType(TSubclassOf< UFGItemDescriptor > inClass){ return EScannableActorType(); }
TSubclassOf<UFGSchematic> UFGItemDescriptor::GetRequiredSchematicToScan(TSubclassOf< UFGItemDescriptor > inClass){ return TSubclassOf<UFGSchematic>(); }
FText UFGItemDescriptor::GetScannerDisplayText(TSubclassOf< UFGItemDescriptor > inClass){ return FText(); }
FColor UFGItemDescriptor::GetScannerLightColor(TSubclassOf< UFGItemDescriptor > inClass){ return FColor(); }
bool UFGItemDescriptor::CanItemBePickedup(TSubclassOf< UFGItemDescriptor > inClass){ return bool(); }
bool UFGItemDescriptor::CanItemBePickedup(UFGItemDescriptor* inClass){ return bool(); }
FText UFGItemDescriptor::GetItemNameInternal() const{ return FText(); }
FString UFGItemDescriptor::GetItemNameInternalAsString() const{ return FString(); }
FText UFGItemDescriptor::GetItemDescriptionInternal() const{ return FText(); }
UTexture2D* UFGItemDescriptor::Internal_GetSmallIcon() const{ return nullptr; }
UTexture2D* UFGItemDescriptor::Internal_GetBigIcon() const{ return nullptr; }
