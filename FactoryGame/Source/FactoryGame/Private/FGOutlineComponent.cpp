// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGOutlineComponent.h"

UFGOutlineComponent::UFGOutlineComponent() : Super() {
	this->mOutlineProxy = nullptr;
	this->mActiveOutlineActor = nullptr;
}
void UFGOutlineComponent::BeginPlay(){ }
UFGOutlineComponent* UFGOutlineComponent::Get(const UWorld* world){ return nullptr; }
void UFGOutlineComponent::ShowOutline(AActor* actorToOutline, const EOutlineColor color){ }
void UFGOutlineComponent::ShowProxyOutline( UStaticMesh* outlineMesh, const FTransform &transform, const EOutlineColor color){ }
void UFGOutlineComponent::ShowMultiActorOutline(TArray< AActor* > actorsToOutline, const EOutlineColor color){ }
void UFGOutlineComponent::UpdateProxyOutlineMesh( UStaticMesh* newOutlineMesh) const{ }
void UFGOutlineComponent::UpdateProxyOutlineLocationAndRotation(const FVector& newLocation, const FRotator& newRotation) const{ }
void UFGOutlineComponent::HideOutline(){ }
void UFGOutlineComponent::SetUpOutlineProxy(){ }
void UFGOutlineComponent::ShowActorOutline( AActor* actorToOutline, const EOutlineColor color) const{ }
void UFGOutlineComponent::HideActorOutline(const AActor* actorToDisableOutlineOn){ }
void UFGOutlineComponent::ShowDismantlePendingMaterial(TArray< AActor* > actorsPendingDismantle){ }
void UFGOutlineComponent::ShowDismantlePendingMaterial(AActor* actorPendingDismantle){ }
void UFGOutlineComponent::ShowDismantlePendingMaterialOnActor(AActor* actorPendingForDismantle){ }
bool UFGOutlineComponent::IsOwnedByLocalPlayer() const{ return bool(); }
