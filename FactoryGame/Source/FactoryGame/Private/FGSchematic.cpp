// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGSchematic.h"

#if WITH_EDITOR
void UFGSchematic::PreSave(FObjectPreSaveContext saveContext){ }
EDataValidationResult UFGSchematic::IsDataValid(TArray< FText >& ValidationErrors){ return EDataValidationResult::Valid; }
#endif 
#if WITH_EDITOR
void UFGSchematic::UpdateAssetBundleData(){ }
#endif 
#if WITH_EDITOR
void UFGSchematic::AddRecipe(TSubclassOf< UFGSchematic > inClass, TSubclassOf<  UFGRecipe > recipe){ }
void UFGSchematic::MigrateDataToNewDependencySystem(){ }
#endif 
#if WITH_EDITORONLY_DATA
#endif 
UFGSchematic::UFGSchematic() : Super() {
	this->mType = ESchematicType::EST_Custom;
	this->mDisplayName = INVTEXT("");
	this->mDescription = INVTEXT("");
	this->mSchematicCategory = nullptr;
	this->mMenuPriority = 0.0;
	this->mTimeToComplete = 600.0;
	this->mIsPlayerSpecific = false;
	this->mSmallSchematicIcon = nullptr;
	this->mDependenciesBlocksSchematicAccess = false;
	this->mHiddenUntilDependenciesMet = false;
	this->mDependsOnSchematic = nullptr;
	this->mSchematicCategoryDeprecated = ESchematicCategory::ESC_LOGISTICS;
}
void UFGSchematic::PostLoad(){ Super::PostLoad(); }
void UFGSchematic::Serialize(FArchive& ar){ Super::Serialize(ar); }
FPrimaryAssetId UFGSchematic::GetPrimaryAssetId() const{ return FPrimaryAssetId(); }
ESchematicType UFGSchematic::GetType(TSubclassOf< UFGSchematic > inClass){ return ESchematicType(); }
FText UFGSchematic::GetSchematicDisplayName(TSubclassOf< UFGSchematic > inClass){ return FText(); }
FText UFGSchematic::GetSchematicDescription(TSubclassOf< UFGSchematic > inClass){ return FText(); }
TSubclassOf< class UFGSchematicCategory > UFGSchematic::GetSchematicCategory(TSubclassOf< UFGSchematic > inClass){ return TSubclassOf<class UFGSchematicCategory>(); }
void UFGSchematic::GetSubCategories(TSubclassOf< UFGSchematic > inClass,  TArray< TSubclassOf<  UFGSchematicCategory > >& out_subCategories){ }
float UFGSchematic::GetMenuPriority(TSubclassOf< UFGSchematic > inClass){ return float(); }
TArray< FItemAmount > UFGSchematic::GetCost(TSubclassOf< UFGSchematic > inClass){ return TArray<FItemAmount>(); }
bool UFGSchematic::GetIsPlayerSpecific(TSubclassOf< UFGSchematic > inClass){ return bool(); }
TArray< class UFGUnlock* > UFGSchematic::GetUnlocks(TSubclassOf< UFGSchematic > inClass){ return TArray<class UFGUnlock*>(); }
int32 UFGSchematic::GetTechTier(TSubclassOf< UFGSchematic > inClass){ return int32(); }
float UFGSchematic::GetTimeToComplete(TSubclassOf< UFGSchematic > inClass){ return float(); }
void UFGSchematic::GetRelevantUnlockedShopSchematics(UObject* worldContext, TSubclassOf< UFGSchematic > inClass, TArray< TSubclassOf< UFGSchematic > >& out_schematics){ }
void UFGSchematic::GetRelevantShopSchematics(TSubclassOf< UFGSchematic > inClass, TArray< TSubclassOf< UFGSchematic > >& out_schematics){ }
FSlateBrush UFGSchematic::GetItemIcon(TSubclassOf< UFGSchematic > inClass){ return FSlateBrush(); }
UTexture2D* UFGSchematic::GetSmallIcon(TSubclassOf< UFGSchematic > inClass){ return nullptr; }
bool UFGSchematic::AreSchematicDependenciesMet(TSubclassOf< UFGSchematic > inClass, UObject* worldContext){ return bool(); }
void UFGSchematic::GetSchematicDependencies(TSubclassOf< UFGSchematic > inClass, TArray<  UFGAvailabilityDependency* >& out_schematicDependencies){ }
bool UFGSchematic::GetHiddenUntilDependenciesMet(TSubclassOf< UFGSchematic > inClass){ return bool(); }
ESchematicState UFGSchematic::GetSchematicState(TSubclassOf< UFGSchematic > inClass, UObject* worldContext){ return ESchematicState(); }
bool UFGSchematic::CanGiveAccessToSchematic(TSubclassOf< UFGSchematic > inClass, UObject* worldContext){ return bool(); }
bool UFGSchematic::IsRepeatPurchasesAllowed(TSubclassOf< UFGSchematic > inClass){ return bool(); }
void UFGSchematic::SortByMenuPriority(TArray< TSubclassOf< UFGSchematic > >& schematics){ }
TArray< EEvents > UFGSchematic::GetRelevantEvents(TSubclassOf< UFGSchematic > inClass){ return TArray<EEvents>(); }
bool UFGSchematic::IsIncludedInBuild(TSubclassOf< UFGSchematic > inClass){ return bool(); }
