// This file has been automatically generated by the Unreal Header Implementation tool

#include "Buildables/FGBuildableDroneStation.h"

AFGBuildableDroneStation::AFGBuildableDroneStation(){ }
void AFGBuildableDroneStation::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const{ }
void AFGBuildableDroneStation::PreReplication(IRepChangedPropertyTracker& ChangedPropertyTracker){ }
void AFGBuildableDroneStation::BeginPlay(){ }
void AFGBuildableDroneStation::EndPlay(const EEndPlayReason::Type EndPlayReason){ }
void AFGBuildableDroneStation::Factory_Tick(float dt){ }
void AFGBuildableDroneStation::Factory_TickProducing(float dt){ }
void AFGBuildableDroneStation::Factory_CollectInput_Implementation(){ }
void AFGBuildableDroneStation::GetDismantleRefund_Implementation(TArray< FInventoryStack >& out_refund) const{ }
void AFGBuildableDroneStation::Dismantle_Implementation(){ }
void AFGBuildableDroneStation::OnReplicationDetailActorRemoved(){ }
void AFGBuildableDroneStation::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGBuildableDroneStation::StartIsLookedAtForSnapping( AFGCharacterPlayer* byCharacter, bool IsValidSnap){ }
void AFGBuildableDroneStation::StopIsLookedAtForSnapping( AFGCharacterPlayer* byCharacter){ }
void AFGBuildableDroneStation::Undock(bool Immediate){ }
int32 AFGBuildableDroneStation::RequestDocking( AFGDroneVehicle* DroneToDock){ return int32(); }
void AFGBuildableDroneStation::SetStationDrone( AFGDroneVehicle* Drone){ }
FVector AFGBuildableDroneStation::GetDroneDockingStartLocation() const{ return FVector(); }
FVector AFGBuildableDroneStation::GetDroneDockingLocation() const{ return FVector(); }
void AFGBuildableDroneStation::EnsureInfoCreated(){ }
void AFGBuildableDroneStation::StartDockingSequence_Implementation( AFGDroneVehicle* Drone){ }
void AFGBuildableDroneStation::EndDockingSequence_Implementation( AFGDroneVehicle* Drone, bool ShouldTransferItems){ }
void AFGBuildableDroneStation::StartTakeoffSequence_Implementation( AFGDroneVehicle* Drone){ }
void AFGBuildableDroneStation::EndTakeoffSequence_Implementation( AFGDroneVehicle* Drone){ }
void AFGBuildableDroneStation::OnRep_ReplicationDetailActor(){ }
AFGReplicationDetailActor_DroneStation* AFGBuildableDroneStation::GetCastRepDetailsActor() const{ return nullptr; }
bool AFGBuildableDroneStation::FilterBatteryClasses(TSubclassOf< UObject > object, int32 idx) const{ return bool(); }
bool AFGBuildableDroneStation::IsValidFuel(TSubclassOf<  UFGItemDescriptor > resource) const{ return bool(); }
void AFGBuildableDroneStation::OnRep_ItemTransferringStage(){ }
void AFGBuildableDroneStation::OnRep_StationHasDronesInQueue(){ }
void AFGBuildableDroneStation::SetItemTransferringStage(EItemTransferringStage NewStage){ }
void AFGBuildableDroneStation::BeginItemTransfer(){ }
void AFGBuildableDroneStation::EndItemTransfer(){ }
EItemTransferTickResult AFGBuildableDroneStation::ItemTransferTick( UFGInventoryComponent* FromInventory,  UFGInventoryComponent* ToInventory, bool MustTransferEverything){ return EItemTransferTickResult(); }
FName AFGBuildableDroneStation::sBatteriesTag = FName();
