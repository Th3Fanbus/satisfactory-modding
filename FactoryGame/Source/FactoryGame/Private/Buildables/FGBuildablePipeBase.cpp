// This file has been automatically generated by the Unreal Header Implementation tool

#include "Buildables/FGBuildablePipeBase.h"
#include "Components/SceneComponent.h"
#include "Components/SplineComponent.h"
#include "Hologram/FGPipelineHologram.h"
#include "InstancedSplineMeshComponent.h"
#include "Net/UnrealNetwork.h"

AFGBuildablePipeBase::AFGBuildablePipeBase() : Super() {
	this->mMesh = nullptr;
	this->mMeshLength = 0.0;
	this->mConnection0 = nullptr;
	this->mConnection1 = nullptr;
	this->mSplineComponent = CreateDefaultSubobject<USplineComponent>(TEXT("SplineComponent"));
	this->mInstancedSplineMeshComponent = CreateDefaultSubobject<UInstancedSplineMeshComponent>(TEXT("InstancedSplineMeshComponent"));
	this->mHologramClass = AFGPipelineHologram::StaticClass();
	this->NetDormancy = ENetDormancy::DORM_Awake;
	this->mSplineComponent->SetupAttachment(RootComponent);
	this->mInstancedSplineMeshComponent->SetupAttachment(RootComponent);
}
void AFGBuildablePipeBase::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGBuildablePipeBase, mSplineData);
	DOREPLIFETIME(AFGBuildablePipeBase, mSnappedPassthroughs);
}
void AFGBuildablePipeBase::BeginPlay(){ }
void AFGBuildablePipeBase::EndPlay(const EEndPlayReason::Type endPlayReason){ }
int32 AFGBuildablePipeBase::GetDismantleRefundReturnsMultiplier() const{ return int32(); }
bool AFGBuildablePipeBase::ShouldBeConsideredForBase_Implementation(){ return bool(); }
void AFGBuildablePipeBase::Upgrade_Implementation(AActor* newActor){ }
void AFGBuildablePipeBase::Dismantle_Implementation(){ }
void AFGBuildablePipeBase::GainedSignificance_Implementation(){ }
void AFGBuildablePipeBase::LostSignificance_Implementation(){ }
void AFGBuildablePipeBase::GainedSignificance_Native(){ }
void AFGBuildablePipeBase::LostSignificance_Native(){ }
void AFGBuildablePipeBase::SetupForSignificance(){ }
float AFGBuildablePipeBase::GetSignificanceRange(){ return float(); }
float AFGBuildablePipeBase::FindOffsetClosestToLocation(const FVector& location) const{ return float(); }
void AFGBuildablePipeBase::GetLocationAndDirectionAtOffset(float offset, FVector& out_location, FVector& out_direction) const{ }
void AFGBuildablePipeBase::SetupConnections(){ }
TArray<AFGBuildablePipeBase*> AFGBuildablePipeBase::Splice(AFGBuildablePipeBase* Pipe, float SpliceOffset, float SpliceLength, AActor* BuildEffectInstigator){ return TArray<AFGBuildablePipeBase*>(); }
void AFGBuildablePipeBase::PostSerializedFromBlueprint(bool isBlueprintWorld){ }
TSubclassOf< class UFGPipeConnectionComponentBase > AFGBuildablePipeBase::GetConnectionType_Implementation(){ return TSubclassOf<class UFGPipeConnectionComponentBase>(); }
void AFGBuildablePipeBase::UnrotateForBlueprintPlaced(){ }
const float AFGBuildablePipeBase::PIPE_COST_LENGTH_MULTIPLIER = float();
