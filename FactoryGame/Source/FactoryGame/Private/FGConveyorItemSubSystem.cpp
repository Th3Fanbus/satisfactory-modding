// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGConveyorItemSubSystem.h"

void FInstanceLODs::UpdateVisibility(int32 NumInstances){ }
void FInstanceLODs::AddBucketInstance(int32 Num, AActor* Outer){ }
void FInstanceLODs::UpdateBuffers(UTexture2D* PositionBuffer, UTexture2D* OrientationBuffer){ }
void FInstanceLODs::Initialize(AActor* Outer, UStaticMesh* Mesh, int32 Row, int32 LodLevel, UTexture2D* PositionBuffer, UTexture2D* OrientationBuffer){ }
void FInstanceLODs::AddInstance_Internal(AActor* Outer){ }
AFGConveyorItemSubsystem::AFGConveyorItemSubsystem(){ }
AFGConveyorItemSubsystem* AFGConveyorItemSubsystem::Get(UWorld* world){ return nullptr; }
void AFGConveyorItemSubsystem::RegisterBelt(AFGBuildableConveyorBase* newBelt){ }
void AFGConveyorItemSubsystem::UnRegisterBelt(AFGBuildableConveyorBase* removedBelt){ }
void AFGConveyorItemSubsystem::Tick(float DeltaSeconds){ }
void AFGConveyorItemSubsystem::BeginPlay(){ }
void AFGConveyorItemSubsystem::ResolvedRegistered(){ }
void AFGConveyorItemSubsystem::ResolveRemoved(){ }
void AFGConveyorItemSubsystem::ResolveNewTypes(){ }
void AFGConveyorItemSubsystem::ComputeViewCullAndDistance(const FVector PlayerLocation, FConveyorActorContainer< const AFGBuildableConveyorBelt* >* Conveyors, FConveyorActorContainer< const AFGBuildableConveyorLift* >* Lifts){ }
void AFGConveyorItemSubsystem::GatherTransformData(const TArray<bool> DistancesToUpdate, const FConveyorActorContainer< const AFGBuildableConveyorBelt* >* Belt, FConveyorActorContainer< const AFGBuildableConveyorLift* >* Lifts){ }
void AFGConveyorItemSubsystem::BuildTextures(const TArray<bool> DistancesToUpdate){ }
bool AFGConveyorItemSubsystem::Resize(){ return bool(); }
void AFGConveyorItemSubsystem::UpdateInstanceBounds(const TArray<bool> DistancesToUpdate){ }
void AFGConveyorItemSubsystem::SubmitUpdateTask(const AActor* Pawn, const TArray< bool > LodsToUpdate){ }
void AFGConveyorItemSubsystem::Cleanup(TArray< bool > LodsToUpdate){ }
TArray< bool > AFGConveyorItemSubsystem::UpdateTimers(float DeltaTime){ return TArray<bool>(); }
