// This file has been automatically generated by the Unreal Header Implementation tool

#include "LocalUserInfo.h"

ULocalUserInfo::ULocalUserInfo(const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer) { }
bool ULocalUserInfo::IsLoggedIn(EOnlineIntegrationUnmappedContext Context) const{ return bool(); }
ECommonUserLoginStatus ULocalUserInfo::GetLoginStatus(EOnlineIntegrationUnmappedContext Context) const{ return ECommonUserLoginStatus(); }
FUniqueNetIdRepl ULocalUserInfo::GetNetId(EOnlineIntegrationMappedContext Context) const{ return FUniqueNetIdRepl(); }
FUniqueNetIdRepl ULocalUserInfo::GetNetId(EOnlineIntegrationUnmappedContext Context) const{ return FUniqueNetIdRepl(); }
FString ULocalUserInfo::GetMappedContextNickname(EOnlineIntegrationMappedContext Context) const{ return FString(); }
FString ULocalUserInfo::GetUnmappedContextNickname(EOnlineIntegrationUnmappedContext Context) const{ return FString(); }
FString ULocalUserInfo::GetDebugString() const{ return FString(); }
FPlatformUserId ULocalUserInfo::GetPlatformUserId() const{ return FPlatformUserId(); }
int32 ULocalUserInfo::GetPlatformUserIndex() const{ return int32(); }
ULocalUserInfoBackend* ULocalUserInfo::GetCachedData(EOnlineIntegrationMappedContext Context){ return nullptr; }
const ULocalUserInfoBackend* ULocalUserInfo::GetCachedData(EOnlineIntegrationMappedContext Context) const{ return nullptr; }
ULocalUserInfoBackend* ULocalUserInfo::GetCachedData(EOnlineIntegrationUnmappedContext Context){ return nullptr; }
const ULocalUserInfoBackend* ULocalUserInfo::GetCachedData(EOnlineIntegrationUnmappedContext Context) const{ return nullptr; }
UCommonUserSubsystem* ULocalUserInfo::GetSubsystem() const{ return nullptr; }
FDelegateHandle ULocalUserInfo::BindOnFriendAddedDelegate(const FOnOnlineFriendListChangeNative::FDelegate& Delegate){ return FDelegateHandle(); }
FDelegateHandle ULocalUserInfo::BindOnFriendRemovedDelegate(const FOnOnlineFriendListChangeNative::FDelegate& Delegate){ return FDelegateHandle(); }
FDelegateHandle ULocalUserInfo::AddOnLoginStateChangeDelegate(const FOnPlayerLoginStateChanged::FDelegate& Delegate) const{ return FDelegateHandle(); }
void ULocalUserInfo::RemoveLoginStatenChangeDelegate(FDelegateHandle &Handle) const{ }
UOnlineFriendList* ULocalUserInfo::CreateFriendList(){ return nullptr; }
void ULocalUserInfo::HandlePresenceUpdated(const UE::Online::FPresenceUpdated& PresenceUpdated, EOnlineIntegrationUnmappedContext Context){ }
void ULocalUserInfo::HandleSessionInviteReceived(const UE::Online::FSessionInviteReceived& InviteReceived, EOnlineIntegrationUnmappedContext Context){ }
void ULocalUserInfo::HandleSessionJoined(const UE::Online::FSessionJoined& SessionJoined, EOnlineIntegrationUnmappedContext Context){ }
void ULocalUserInfo::HandleSessionLeft(const UE::Online::FSessionLeft& SessionLeft, EOnlineIntegrationUnmappedContext Context){ }
void ULocalUserInfo::HandleSessionUpdated(const UE::Online::FSessionUpdated& SessionUpdated, EOnlineIntegrationUnmappedContext Context){ }
void ULocalUserInfo::HandleUISessionJoinRequested(const UE::Online::FUISessionJoinRequested& SessionJoinRequested, EOnlineIntegrationUnmappedContext Context){ }
void ULocalUserInfo::SetPresenceJoinability(EOnlineUserPresenceJoinability Joinability, FOnlineIntegrationInternalAccessKey&&) const{ }
void ULocalUserInfo::SetPresenceValue(const FString& Key, const FString& Value) const{ }
void ULocalUserInfo::ClearPresenceProperty(const FString& Key) const{ }
void ULocalUserInfo::SetPresenceString(const FString& InPresenceString) const{ }
void ULocalUserInfo::UnlinkExternalAccount(){ }
void ULocalUserInfo::LogoutExternalAccount(bool bForgetCachedAuth){ }
void ULocalUserInfo::LoginExternalAccount(){ }
TSharedPtr<UE::Online::FAccountInfo> ULocalUserInfo::GetAccountInfo(EOnlineIntegrationUnmappedContext Context) const{ return TSharedPtr<UE::Online::FAccountInfo>(); }
void ULocalUserInfo::SetGameSession(const FCommonSession &Session, FOnlineIntegrationInternalAccessKey&&){ }
void ULocalUserInfo::SetNATType(const ECommonUserNATType InNATType, FOnlineIntegrationInternalAccessKey&&){ }
void ULocalUserInfo::SetCurrentAuthenticationSequence( UOnlineAuthenticationSequence* AuthenticationSequence, FOnlineIntegrationInternalAccessKey&&){ }
void ULocalUserInfo::SetHasLinkedAccount(bool bHasLinkedAccount, FOnlineIntegrationInternalAccessKey&&){ }
void ULocalUserInfo::SetCanPlayPrivilegeAvailability(const ECommonUserPrivilegeAvailability& Availability, FOnlineIntegrationInternalAccessKey&&){ }
void ULocalUserInfo::SetCanPlayOnlinePrivilegeAvailability(const ECommonUserPrivilegeAvailability& Availability, FOnlineIntegrationInternalAccessKey&&){ }
void ULocalUserInfo::OnLoginStatusChanged(TSharedRef<UE::Online::FAccountInfo> AccountInfo, EOnlineIntegrationUnmappedContext Context, FOnlineIntegrationInternalAccessKey&&){ }
void ULocalUserInfo::NotifyFriendPresenceUpdated(UOnlineFriend* OnlineFriend){ }
void ULocalUserInfo::RelationshipUpdated(const UE::Online::FRelationshipUpdated& RelationshipUpdated, EOnlineIntegrationUnmappedContext Context){ }
void ULocalUserInfo::QueryPlayerInfo(EOnlineIntegrationUnmappedContext Context){ }
TFuture<void> ULocalUserInfo::QueryFriends(EOnlineIntegrationUnmappedContext Context){ return TFuture<void>(); }
void ULocalUserInfo::FetchFriendInfoAsync(UOnlineFriend* Friend, FOnFriendInfoQueryComplete OnQueryComplete){ }
